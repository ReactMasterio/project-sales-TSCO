i have a handlePaginationChange() that fetch const response = await axios.get("http://localhost:3020/get-product-ids") and in response i must get array of IDs or an empty array, then i want to loop in them and find those IDs that are not matched with the array of IDs that i have, then in a for async loop i want to call a function then pass the ID that didnt match
this is my function:
const handlePaginationChange = async (current, pageSize) => {
    setLoading(true);
    try {
      // Use Axios to send a GET request
      const response = await axios.get("http://localhost:3020/get-product-ids");

      if (response.status === 200) {
        const allProductIds = response.data;

        const currentIds = data
          .slice((current - 1) * pageSize, current * pageSize)
          .map((item) => item.productID);

        const nonFetchedIds = currentIds.filter((currentId) => {
          return !allProductIds.includes(currentId);
        });

        if (nonFetchedIds.length > 0) {
          const updatedStatsArray = await Promise.all(
            nonFetchedIds.map((currentId) => fetchCommentsAndStats(currentId))
          );

          setFetchedIds([...nonFetchedIds]);

          for (const updatedStats of updatedStatsArray) {
            console.log(updatedStats);
            // Use Axios to send a POST request
            const postResponse = await axios.post(
              "http://localhost:3020/save-stats",
              JSON.stringify(updatedStats),
              {
                headers: {
                  "Content-Type": "application/json",
                },
              }
            );
            console.log(postResponse);

            if (postResponse.status === 200) {
              console.log("Stats saved successfully!");
            } else {
              console.error("Failed to save stats.");
            }
          }
        }
      } else {
        console.error("Failed to fetch product IDs.");
      }
    } catch (error) {
      console.error("Error saving stats:", error);
    } finally {
      setLoading(false);
    }

    setTableParams({
      pagination: {
        current,
        pageSize,
      },
    });
  };